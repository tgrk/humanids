name: Dialyzer
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
  push:
    branches:
      - '*'
jobs:
  dialyzer:
    name: Run Dialyzer on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: ['27.1']
        elixir: ['1.18.2']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Elixir
        id: beam
        uses: erlef/setup-elixir@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
  
      - name: Fetch dependencies
        run: mix deps.get

      # Don't cache PLTs based on mix.lock hash, as Dialyzer can incrementally update even old ones
      # Cache key based on Elixir & Erlang version (also useful when running in matrix)
      - name: Restore PLT cache
        uses: actions/cache/restore@v4
        id: plt_cache
        with:
          key: |
                ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          restore-keys: |
                ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
          path: |
                priv/plts

      # Create PLTs if no cache was found
      - name: Create PLTs
        if: steps.plt_cache.outputs.cache-hit != 'true'
        run: mix dialyzer --plt

      - name: Save PLT cache
        uses: actions/cache/save@v3
        if: steps.plt_cache.outputs.cache-hit != 'true'
        id: plt_cache_save
        with:
         key: |
           ${{ runner.os }}-${{ steps.beam.outputs.elixir-version }}-${{ steps.beam.outputs.otp-version }}-plt
         path: |
          priv/plts

      - name: Run dialyzer
        run: mix dialyzer  --format github --format dialyxir